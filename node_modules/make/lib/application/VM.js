(function() {

  /** Mixes the source object into the target object. It performs
   * a copy of source object fields including whatever be in the
   * prototype chain.
   *
   * @param {Object} target Object to augment. Cannot be null.
   * @param {Object} source Object to copy fields from. Cannot be null.
   * @param {Object} [options] Options to modify the mixin behaviour. Can
   *    be null.
   * @param {Boolean} [options.shallow] Indicates whether the mixin will
   *    exclude fields inherited from the prototype chain. Default is
   *    <code>false</code>.
   */
  Mixin = function (target, source, options) {
    var opts = options || {};

    for (var property in source) {
      if (!opts.shallow ||
        (opts.shallow && source.hasOwnProperty(property))) {
        target[property] = source[property];
      }
    }

    return target;
  };

  /** Top-level namespace for node build utils.
   * @namespace
   */
  make = Object.create({
    /**
     * Current VM version.
     * @constant
     */
    version : "0.0.1",

    /** Location of the remote CommonVM service. Must not be null or empty.
     * @type String
     */
    serviceUrl : "ws://localhost:8085",

    /** Enumeration of supported programming languages.
     */
    lang : {
      /** Source code is Java-compliant code.
       * @constant
       */
      JAVA : "java",

      /** Source code is PHP-compliant code.
       * @constant
       */
      PHP : "php"
    }
  });

  /** Utility functions.
   */
  make.util = Object.create(
  /** @lends make.util */
  {
    /** Capitalizes the first letter of the specified string.
     *
     * @param {String} string String to capitalize. Cannot be null.
     * @return {String} Returns the capitalized String. Never returns null.
     */
    capitalize : function (string) {
      return string.substr(0, 1).toUpperCase() + string.substr(1);
    }
  });

  /** Represents a workspace that can be processed by a <code>Compiler</code>.
   * <p>
   * Workspaces contain a set of buffers and their relationships, as well as
   * any result of operations performed over them.
   * </p>
   * @param {Object} [workspace] Raw workspace object. Can be null.
   * @constructor
   */
  make.Workspace = function (workspace) {

    return Mixin(this,
    /** @lends make.Workspace */
    {
      /** Maps buffers by name. Each buffer represents a single compilation
       * unit.
       *
       * @memberOf make.Workspace#
       * @private
       */
      buffers : workspace.buffers || [],

      /**
       * Source code programming language. One of defined languages in the
       * <code>make.lang</code> enumeration. Cannot be null or empty.
       * @type String
       */
      lang : workspace.lang,

      /** Adds a new buffer to the workspace. If the buffer already exist it
       * will throw an exception.
       * @param {make.Buffer} buffer Buffer to add. Cannot be null.
       */
      addBuffer : function (buffer) {
        this.buffers.push(buffer);
      },

      /** Returns the existing buffers in the workspace.
       * @return {make.Buffer[]} The list of existing buffers. Never returns
       *    null.
       */
      getBuffers : function () {
        return this.buffers;
      }
    });
  };

  /**
   * A <code>Compiler</code> is a strategy that allows to transform
   * queries into compilation commands in order to send them for execution to
   * the server.
   * <p>
   * <code>Compiler</code>s manages the full lifecycle of queries. Queries
   * are such workspaces, which means that can handle a set resources and their
   * relationships.
   * </p>
   *
   * @since 0.0.1
   * @constructor
   */
  make.Compiler = function () {

    /** Contains the connection opened by this instance.
     * @type WebSocket
     * @memberOf make.Compiler#
     * @private
     */
    var connection = null;

    /** Creates a new connection to the CommonVM remote service.
     *
     * @param {Function} callback Function that receives notifications about
     *    connection events. Cannot be null.
     *
     * @memberOf make.Compiler#
     * @private
     */
    var openConnection = function (callback) {
      if (connection == null) {
        connection = new WebSocket(make.serviceUrl);

        connection.onopen = function (event) {
          callback("open", event);
        };

        connection.onmessage = function (event) {
          callback("message", event);
        };
        
        connection.onclose = function (event) {
          callback("close", event);
        };
      }
    };

    return Mixin(this,
    /** @lends make.Compiler */
    {
      /** Compiles the specified workspace and populates results in the same
       * object. This operation is asynchronous. The callback will receive
       * the workspace containing the compilation results.
       *
       * @param {make.Workspace} workspace Workspace to process. Cannot
       *    be null.
       * @param {Function} callback Function invoked after processing. It
       *    takes the connection event and the workspace as parameters. Cannot
       *    be null.
       */
      build : function (workspace, callback) {
        openConnection(function(type, event) {
          if (type === "open" || type === "attach") {
            connection.send(JSON.stringify(workspace));
          } else if (type === "message") {
            var result = JSON.parse(event.data);

            callback(result.workspace, result.errors); 
          }
        });
      }
    });
  };

  /** Factory method to create the proper Compiler according to the query
   * programming language. It relies in the following convention to instantiate
   * the message adapter:
   * <ul>
   *   <li>Capitalizes the first letter of the query's programming
   *    language.</li>
   *   <li>Appends the suffix <strong>Compiler</strong> to the
   *    capitalized name </li>
   *   <li>Search for the class in the VM namespace.</li>
   * </ul>
   * <p>
   * For example, for the Java programming language it will try to instantiate
   * a make.JavaCompiler class.
   * </p>
   *
   * @param {make.Workspace} workspace That describes the compiler that will be
   *    created.
   * @return {make.Compiler} A valid compiler instance.
   * @throws Error if the class isn't found.
   */
  make.Compiler.newInstance = function (workspace) {
    var className = make.util.capitalize(workspace.lang) + "Compiler";

    if (typeof make[className] !== "function") {
      throw new Error("Class not found: " + className);
    }

    console.log("Instantiating " + className);
    return new make[className]();
  };

  /** Represents a buffer that contains source code. A buffer determines the
   * lifecycle of a piece of code. This implementation operates over memory.
   *
   * @param {Object} [buffer] Optional. Set of properties to
   *    initialize in this buffer. Can be null.
   *
   * @author Matias Mirabelli <lumen.night@gmail.com>
   * @constructor
   */
  make.Buffer = function (buffer) {

    return Mixin(this,
    /** @lends make.Buffer */
    {
      /** Source code represented by this buffer. Cannot be null.
       * @type String
       */
      sourceCode : buffer.sourceCode,

      /**
       * Buffer name. It must be unique in a single context. Cannot be null.
       * @type String
       */
      name : buffer.name,

      /**
       * An object describing a set of flags for this buffer. Some flags are
       * compiler-specific. The following common flags are allowed:
       * <ul>
       *  <li><strong>main</strong>: A boolean value indicating whether this
       *    source code is the application's entry point or not.</li>
       * </ul>
       */
      flags : buffer.flags,

      /**
       * Writes this buffer in the specified path.
       *
       * @param {String} sourcePath Directory where buffer will be saved.
       *    Cannot be null.
       */
      save : function (sourcePath) {
        throw new Error("Not supported by memory buffers.");
      }
    });
  };

  /**
   * Factory method to construct a new buffer. Default implementation creates
   * creates a single <code>make.Buffer</code>.
   *
   * @param {Function} aBufferClass Class of the buffer to instantiate. Must
   *    be a valid <code>make.Buffer</code> type.
   * @param {Object} [buffer] Optional. Set of properties to
   *    initialize in this buffer. Can be null.
   * @return {make.Buffer} Returns the new created buffer. Never returns null.
   */
  make.Buffer.newInstance = function (aBufferClass, buffer) {
    var result = new aBufferClass(buffer);

    if (!(result instanceof make.Buffer)) {
      throw new Error("Invalid buffer instance.");
    }
    
    return result;
  };
}());
