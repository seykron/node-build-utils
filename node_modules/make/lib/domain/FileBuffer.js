/** Represents a source code buffer stored in the file system.
 *
 * @author Matias Mirabelli <lumen.night@gmail.com>
 * @constructor
 */
make.FileBuffer = function (buffer) {

  /** Access to Node's File System API. Cannot be null.
   */
  var fs = require("fs");

  /** Access to Node's Path API. Cannot be null.
   */
  var path = require("path");

  /** Creates the specified path if it's needed.
   *
   * @param {String} sourcePath Directory to create. Cannot be null.
   * @param {Function} callback Function invoked when the path is created. It's
  '*    also invoked whether the directory exists. Cannot be null.
   * @memberOf make.FileBuffer#
   * @private
   */
  var buildFilePath = function (file, callback) {
    var dirname = path.dirname(file);

    console.info("Validating directory: " + dirname);

    path.exists(dirname, function(exists) {
      if (!exists) {
        console.info("Path doesn't exist, creating: " + dirname);

        VM.io.mkdirs(dirname, 0755, function(err) {
          if (err) {
            throw err;
          }

          callback(file);
        });
      } else {
        callback(file);
      }
    });
  };

  console.log("CREATING FileBuffer");
  return Mixin(this, Mixin(new make.Buffer(buffer),
  /** @lends make.FileBuffer */
  {

    /** Writes this buffer into the specified path.
     *
     * @param {String} sourcePath Directory where buffer will be saved. Cannot
     *    be null.
     */
    save : function ($super, sourcePath, callback) {
      buildFilePath(this.getFile(sourcePath), function(file) {
        console.info("Writing buffer: " + this.name + " to " + file);

        fs.writeFile(file, this.sourceCode, function(err) {
          if (err) {
            throw err;
          }
          console.info("Buffer saved to: " + file);
          callback();
        });
      }.bind(this));
    },

    /**
     * Returns the full path and file name related to this buffer. 
     */
    getFile : function (sourcePath) {
      return path.join(sourcePath, this.name);
    }
  }));
};
